
#include "SDL.h"
#include "SDL_syswm.h"
#include <bgfx/bgfx.h>
#include <bgfx/platform.h>
#include <bx/bx.h>
#include <bx/mutex.h>
#include <bx/thread.h>

void threadInit()
{
        bgfx::Init init;
        // TODO: read from saved user config
        // init.type     = bgfx::RendererType::Direct3D9;
        // init.type     = bgfx::RendererType::Direct3D11;
        // init.type     = bgfx::RendererType::Direct3D12;
        init.type     = bgfx::RendererType::OpenGL;
        // init.type     = bgfx::RendererType::Vulkan;
        // init.vendorId = args.m_pciId;
        init.resolution.width  = 800;
        init.resolution.height = 600;
        init.resolution.reset  = BGFX_RESET_VSYNC;

        bgfx::init(init);

switch (bgfx::getRendererType())
{
    case (bgfx::RendererType::Direct3D9):
        spdlog::info("Renderer: Direct3D9");
        break;
    case (bgfx::RendererType::Direct3D11):
        spdlog::info("Renderer: Direct3D11");
        break;
    case (bgfx::RendererType::Direct3D12):
        spdlog::info("Renderer: Direct3D12");
        break;
    case (bgfx::RendererType::OpenGL):
        spdlog::info("Renderer: OpenGL");
        break;
    case (bgfx::RendererType::Vulkan):
        spdlog::info("Renderer: Vulkan");
        break;
    default:
        spdlog::info("Renderer: Metal????");
        break;
}

    // Enable debug text.
    // bgfx::setDebug(BGFX_DEBUG_TEXT /*| BGFX_DEBUG_STATS*/);
    bgfx::setDebug(BGFX_DEBUG_STATS);

    // Set view 0 clear state.
    bgfx::setViewClear(0, BGFX_CLEAR_COLOR | BGFX_CLEAR_DEPTH, 0x303030ff, 1.0f, 0);
}

int counter = 0;

static bool m_exit = false;

int threadMain(bx::Thread* _thread, void* _userData)
{
    BX_UNUSED(_thread);
    // spdlog::set_level(spdlog::level::debug);

    while (!m_exit) {
    // while (1) {
    // spdlog::debug("threadMain");
        bgfx::setViewRect(0, 0, 0, uint16_t(800), uint16_t(600));
        bgfx::touch(0);
        bgfx::dbgTextClear();
        bgfx::dbgTextPrintf(0, 1, 0x4f, "Counter:%d", counter++);
        bgfx::frame();

        SDL_Delay(1);
    }
    return 0;
}


static void* sdlNativeWindowHandle(SDL_Window* _window)
{
    SDL_SysWMinfo wmi;
    SDL_VERSION(&wmi.version);
    if (!SDL_GetWindowWMInfo(_window, &wmi) )
    {
        return NULL;
    }

#   if BX_PLATFORM_LINUX || BX_PLATFORM_BSD
#       if ENTRY_CONFIG_USE_WAYLAND
    wl_egl_window *win_impl = (wl_egl_window*)SDL_GetWindowData(_window, "wl_egl_window");
    if(!win_impl)
    {
        int width, height;
        SDL_GetWindowSize(_window, &width, &height);
        struct wl_surface* surface = wmi.info.wl.surface;
        if(!surface)
            return nullptr;
        win_impl = wl_egl_window_create(surface, width, height);
        SDL_SetWindowData(_window, "wl_egl_window", win_impl);
    }
    return (void*)(uintptr_t)win_impl;
#       else
    return (void*)wmi.info.x11.window;
#       endif
#   elif BX_PLATFORM_OSX
    return wmi.info.cocoa.window;
#   elif BX_PLATFORM_WINDOWS
    return wmi.info.win.window;
#   endif // BX_PLATFORM_
}


inline bool sdlSetWindow(SDL_Window* _window)
{

    SDL_SysWMinfo wmi;
    SDL_VERSION(&wmi.version);
    if (!SDL_GetWindowWMInfo(_window, &wmi) )
    {
        return false;
    }

    bgfx::PlatformData pd;
#   if BX_PLATFORM_LINUX || BX_PLATFORM_BSD
#       if ENTRY_CONFIG_USE_WAYLAND
    pd.ndt          = wmi.info.wl.display;
#       else
    pd.ndt          = wmi.info.x11.display;
#       endif
#   elif BX_PLATFORM_OSX
    pd.ndt          = NULL;
#   elif BX_PLATFORM_WINDOWS
    pd.ndt          = NULL;
#   endif // BX_PLATFORM_
    pd.nwh          = sdlNativeWindowHandle(_window);

    pd.context      = NULL;
    pd.backBuffer   = NULL;
    pd.backBufferDS = NULL;
    bgfx::setPlatformData(pd);

    return true;
}

bx::Thread thread;

__declspec(dllexport) int dvigl_init(int _argc, char const *_argv[])
{
    SDL_Init(SDL_INIT_EVERYTHING);

    SDL_Window* window = SDL_CreateWindow("bgfx", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 800, 600, SDL_WINDOW_SHOWN | SDL_WINDOW_RESIZABLE);

    sdlSetWindow(window);
    bgfx::renderFrame();

    threadInit();
    bgfx::frame();
    thread.init(threadMain);

// spdlog::set_level(spdlog::level::debug);
// spdlog::debug("Starting");
SDL_Delay(1000);
    // bool exit = false;
    SDL_Event event;
    while (!m_exit) {

// spdlog::debug("renderFrame");
        while (SDL_PollEvent(&event)) {
// spdlog::debug("here");
            switch (event.type) {
            case SDL_QUIT:
                m_exit = true;
                break;

            case SDL_WINDOWEVENT: {
                const SDL_WindowEvent& wev = event.window;
                switch (wev.event) {
                case SDL_WINDOWEVENT_RESIZED:
                case SDL_WINDOWEVENT_SIZE_CHANGED:
                    break;

                case SDL_WINDOWEVENT_CLOSE:
                    m_exit = true;
                    break;
                }
            } break;
            default:
                break;
            }
        }

        // bgfx::renderFrame();
        SDL_Delay(1);
    }

    bgfx::shutdown();

    while (bgfx::RenderFrame::NoContext != bgfx::renderFrame()) {
    };

    thread.shutdown();

    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
}
